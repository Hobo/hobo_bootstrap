<!--<def tag="field-list">-->
<!--  <feckless-fieldset class="horizontal" merge/>-->
<!--</def>-->


<%# When using field-lists, remember to add the form-horizontal class to get the bootstrap looks (this is done automatically in forms and show-page).
    <div class="form-horizontal">
      <field-list class="form-horizontal" with="&Project.first"/>
    </div>
%>

<def tag="field-list">
  <bootstrap-fields merge/>
</def>

<%# This tag adds the class 'uneditable-input' to a view.   This is very useful with `<bootstrap-fields>`, which is the default `<field-list>` for hobo_bootstrap.  Use like so:


    <field-list class="form-horizontal" tag="uneditable-input">
%>
<def tag="uneditable-input">
  <view merge class="uneditable-input"/>
</def>

<def tag="bootstrap-fields" attrs="size, columns, tag, no-edit, required, no-blanks">
  <% tag ||= scope.in_form ? "input" : "view"; no_edit ||= "skip" -%>
  <% required ||= "" ; required = comma_split(required.gsub('-', '_')) -%>
  <div merge-attrs="&attributes - attrs_for(:with_fields)">
    <legend param if="&all_parameters[:legend]" />
    <with-fields-grouped merge-attrs="&attributes & attrs_for(:with_fields)" size="&size" columns="&columns">

    <% field_name = this_field_name
       input_attrs = {:no_edit => no_edit} if tag == "input" && no_edit == "disable"
       field_method = scope.field_name.to_s.sub('?', '').gsub('.', '-')
       id_for_this = param_name_for_this.gsub('[', '_').gsub(']', '')
    -%>
      <div
         class="control-group #{'required' if required.include?(scope.field_name)}" 
         unless="&(tag == 'input' && no_edit == 'skip' && !can_edit?) || ((tag == 'view' || tag == 'uneditable-input') && no_blanks && this.blank?)"
         param="#{field_method}-field">

        <label class="control-label" for="&id_for_this" param="#{field_method}-label" unless="&field_name.blank?">
          <%= field_name %>
        </label>

        <div class="controls">
          <do param="#{field_method}-view">
            <do param="view"><call-tag tag="&tag" param="#{field_method}-tag" merge-attrs="&input_attrs"/></do>
          </do>
          <p param="#{field_method}-help" class="help-block" if="&tag.to_sym == :input && !this_field_help.blank?">
            <%= this_field_help %>
          </p>
        </div>

      </div>
    </with-fields-grouped>
  </div>
</def>


<extend tag="form">
  <old-form: class="form-horizontal" merge>
    <actions: class="form-actions"/>
  </old-form:>
</extend>









<!--
Like `<with-fields>`, but groups fields into columns in a bootstrap-friendly fashion.

### Attributes

Supports all attributes supported by `<with-fields>` plus:

- size: # of columns in the grid system.  Default is 12
- columns: # of columns.  Default is 1.

-->
<def tag="with-fields-grouped" attrs="size, columns, force-all"><%
  field_names = with_fields_helper(attributes)
  field_names = field_names.select {|f| can_view?(this, f)} unless force_all
  columns = 1 unless columns
  columns = columns.to_i
  size = 12 unless size
  size = size.to_i
  span_size = size / columns
  field_names_groups = field_names.in_groups(columns, false)
  row_classes = "row"
  row_classes += " columns" if columns > 1
  %><div class="#{row_classes}"> <%
  field_names_groups.each do |field_names_group|
    %> <div class="span#{span_size}"> <%
    field_names_group.each do |field|
      %><set-scoped field-name="&field"><%
      if field == "this"
        %><do param="default"/><%
      else
        %><with field="&field"><do param="default"/></with><%
      end
      %></set-scoped><%
    end
    %> </div> <%
  end 
  %> </div>
</def>

<!-- This tag is used in multiple column forms, when you need a double sized field (address for example) that is still aligned with the rest -->
<def tag="single-field-list" attrs="tag, no-edit, required, no-blanks">
  <% tag ||= scope.in_form ? "input" : "view"; no_edit ||= "skip" -%>
  <% required ||= "" ; required = comma_split(required.gsub('-', '_')) -%>
  <legend param if="&all_parameters[:legend]" />
  <with-fields merge-attrs="&attributes & attrs_for(:with_fields)">
  
  <% field_name = this_field_name
     input_attrs = {:no_edit => no_edit} if tag == "input" && no_edit == "disable"
     field_method = scope.field_name.to_s.sub('?', '').gsub('.', '-')
     id_for_this = param_name_for_this.gsub('[', '_').gsub(']', '')
  -%>
    <div 
      class="control-group #{'required' if required.include?(scope.field_name)}" 
      unless="&(tag == 'input' && no_edit == 'skip' && !can_edit?) || (tag == 'view' && no_blanks && this.blank?)" 
      param="#{field_method}-field">
      
      <label class="control-label" for="&id_for_this" param="#{field_method}-label" unless="&field_name.blank?">
        <%= field_name %>
      </label>
      
      <div class="controls">
        <do param="#{field_method}-view">
          <do param="view"><call-tag tag="&tag" param="#{field_method}-tag" merge-attrs="&input_attrs"/></do>
        </do>
        <p param="#{field_method}-help" class="help-block" if="&tag.to_sym == :input && !this_field_help.blank?">
          <%= this_field_help %>
        </p>
      </div>
      
    </div>
  </with-fields>
</def>


<!-- This field list creates a field list in just one line using -->
<def tag="one-line-field-list" attrs="tag, no-edit, required, no-blanks">
  <% tag ||= scope.in_form ? "input" : "view"; no_edit ||= "skip" -%>
  <% required ||= "" ; required = comma_split(required.gsub('-', '_')) -%>
  <legend param if="&all_parameters[:legend]" />
  <with-fields merge-attrs="&attributes & attrs_for(:with_fields)">
  
    <% field_name = this_field_name
       input_attrs = {:no_edit => no_edit} if tag == "input" && no_edit == "disable"
       field_method = scope.field_name.to_s.sub('?', '').gsub('.', '-')
       id_for_this = param_name_for_this.gsub('[', '_').gsub(']', '')
    -%>

    <do param="#{field_method}-view">
      <do param="view">
        <call-tag tag="&tag" placeholder="&field_name" param="#{field_method}-tag" merge-attrs="&input_attrs"/>
      </do>
    </do>
    <p param="#{field_method}-help" class="help-block" if="&tag.to_sym == :input && !this_field_help.blank?">
      <%= this_field_help %>
    </p>
      
  </with-fields>
</def>




<def tag="one-line-form" attrs="fields">
  <div class="row">
    <div class="span12">
      <form class="inline-form well" merge-attrs>
        <field-list: replace>
          <one-line-field-list fields="&fields"/>
        </field-list:>
        <actions: replace>
          <button class="btn btn-primary" type="submit">
            +
          </button>
        </actions:>
      </form>
    </div>
  </div>
</def>
